
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mmqkvjxsxufozfgqjoxz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1tcWt2anhzeHVmb3pmZ3Fqb3h6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc2NTA0NjYsImV4cCI6MjA2MzIyNjQ2Nn0.enK86qnUULCkOQhzVjsz68gTu3854tLwn1Y3Snah6f4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof localStorage !== 'undefined' ? localStorage : undefined, 
    persistSession: true,
    autoRefreshToken: true,
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: { 'x-my-custom-header': 'monkey-deals-app' },
    // Increase timeout for larger data sets and improve reliability
    fetch: (url, options) => {
      // Set appropriate timeouts based on endpoint
      let timeout = 180000; // Default 3 minutes
      
      // Check URL to assign different timeouts for different operations
      const urlString = url.toString();
      
      if (urlString.includes('sync-linkmydeals')) {
        timeout = 300000; // 5 minutes for LinkMyDeals sync function
      } else if (urlString.includes('user_preferences')) {
        timeout = 60000; // 1 minute for preferences operations
      } else if (urlString.includes('auth')) {
        timeout = 30000; // 30 seconds for auth operations
      }
      
      // Create an AbortController with the appropriate timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, timeout);
      
      // Make the fetch request with the AbortController's signal
      return fetch(url, {
        ...options,
        signal: controller.signal,
      }).then(response => {
        clearTimeout(timeoutId);
        return response;
      }).catch(error => {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
          console.error(`Request to ${urlString} timed out after ${timeout}ms`);
          throw new Error(`Request timeout after ${timeout / 1000} seconds`);
        }
        
        throw error;
      });
    }
  }
});
